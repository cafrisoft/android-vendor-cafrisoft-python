
from TModule.Device import *
from abc import ABCMeta, abstractmethod
import os
import sys

class Base(metaclass=ABCMeta) :

    class Item :
        def __init__(this, obj, loopCnt) : 
            this.__Obj = obj
            this.__loopCnt = loopCnt

        def Run(this) :
            for i in range(this.__loopCnt) :
                this.__Obj.Run()

    def __init__(this, device, id, desc) : 
        this.device = device
        this.ID = id;
        this.desc = desc
        this.__ItemList=[]

    def Add(this, obj, loopCnt=1) :
        item = Base.Item(obj, loopCnt)
        this.__ItemList.append(item)

    def Begin(this) : this.__Begin__()
    def __Begin__(this) : pass
    def End(this) : this.__End__()
    def __End__(this) : pass
    def Run(this) :
        this.Begin()
        for item in this.__ItemList :
            item.Run()
        this.__Run__()
        this.End()
    def __Run__(this) : pass

class TCStepBase(Base) : 

    def ParsingID(className) :
        assert className[0:7]=='TCStep_'
        szID = className[7:]
        ID=int(szID)
        return ID

    def __init__(this, className, device, desc) : 
        Base.__init__(this, device, TCStepBase.ParsingID(className), desc)

    def Begin(this) : 
        print("-------------------------------------------------")
        print("TCStep_%d : %s" %(this.ID, this.desc) )
        print("-------------------------------------------------")
        this.__Begin__()
    
    def End(this) : 
        this.__End__()
        print("");
        print("");
    

class TCBase(Base) : 

    def ParsingID(pyFileName) :
        baseName = os.path.basename(pyFileName)
        assert baseName[0]=='T'
        assert baseName[1]=='C'
        assert baseName[2]=='_'
        szID = baseName[3:7]
        assert baseName[7]=='.'
        assert baseName[8]=='p'
        assert baseName[9]=='y'
        ID=int(szID)
        return ID

    def __init__(this, pyFileName, device, desc) : 
        Base.__init__(this, device, TCBase.ParsingID(pyFileName), desc)
        this.__List=[]
         

class SCBase(Base) : 

    def ParsingID(pyFileName) :
        baseName = os.path.basename(pyFileName)
        assert baseName[0]=='S'
        assert baseName[1]=='C'
        assert baseName[2]=='_'
        szID = baseName[3:7]
        assert baseName[7]=='.'
        assert baseName[8]=='p'
        assert baseName[9]=='y'
        ID=int(szID)
        return ID


    def __init__(this, pyFileName, device, desc) : 
        Base.__init__(this, device, SCBase.ParsingID(pyFileName),  desc)
        this.__List=[]
    
    def Begin(this) : 
        print("[\tSC_%04d] Begin" % this.ID)
        this.__Begin__()


    def End(this) : 
        this.__End__()
        print("[\tSC_%04d] End" % this.ID)


class JobBase(Base) : 
    
    def ParsingID(pyFileName) :
        baseName = os.path.basename(pyFileName)
        assert baseName[0]=='J'
        assert baseName[1]=='O'
        assert baseName[2]=='B'
        assert baseName[3]=='_'
        szID = baseName[4:8]
        ID=int(szID)
        assert baseName[8]=='.'
        assert baseName[9]=='p'
        assert baseName[10]=='y'
        return ID

    def __init__(this, pyFileName, device, desc) : 
        Base.__init__(this, device, JobBase.ParsingID(pyFileName), desc)
        this.__List=[]

    def Begin(this) : 
        print("[JOB_%04d] Begin" % this.ID)
        this.__Begin__()

    def End(this) : 
        this.__End__()
        print("[JOB_%04d] End" % this.ID)


    