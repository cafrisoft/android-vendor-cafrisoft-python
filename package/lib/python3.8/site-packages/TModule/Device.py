from enum import Enum
import time
import platform
import sys
import enum
import ted
from abc import ABCMeta, abstractmethod
from TModule import Util
from TModule import Adc

PackageName="anapass-python"
ModuleName="TModule"
DisplayName="[" + PackageName + ":" + ModuleName + "] "

print("--------------------------------------------------------------------------------")
print(DisplayName)


class TString :
    def __init__(this, str):
        this.__String = str

    def ToCTypeString(this) :
        return this.__String.encode('utf-8')

    #static method
    def ConvertToCTypeStrng(x) :
        return x.encode('utf-8')

    def ConvertCTypeStringToUnicode(x) :
        return x.decode('utf-8')


class TPower :

    class Type(enum.IntEnum) :
        VBAT1=0
        ELVSS=1
        VDD1=2
        VCI1=3
        VBAT2=4
        VDD2=5
        VCI2=6

    def __init__(this):
        this.No = 0
        this.Avail=[0 for _ in range(10)]
        this.Value1=[0 for _ in range(10)]
        this.Voltage=[0.0 for _ in range(10)]
        this.Current=[0.0 for _ in range(10)]
        this.Range1=[0.0 for _ in range(10)]
        this.Range2=[0.0 for _ in range(10)]


class TChip :
    class Type(enum.IntEnum) : 
        Common=0
        ANA6705=1
        ANA6706=2

class TBoard :
    class Type(enum.IntEnum) : 
        Common=0

#
# class TDevice
#
class TDevice :

    class Type(enum.IntEnum) : 
        T5 = 0
        T5PacketAnalysis=1
        T4 = 2
        TESys=3

    class ErrorString(enum.Enum) :
        GetResp="ErrorGetResp"
    
    def __init__(this, deviceType):
        #print(DisplayName +"TRY: create " + deviceType.name )
        this.__DeviceHandle = 0x00
        this.__DeviceType = deviceType
        this.__SoutAdcMaxChCount=16
        this.__LdoAdcMaxChCount=16
        this.__RegAdcMaxChCount=16

    def __del__(this): pass
        #print("TDevice::~TDevice")
        #TDeviceDestroy(this.__DeviceHandle)

    def GetName(this) :
        return this.__DeviceType.name

    def __getattr__(this, attrName) :
        
        if attrName == 'Handle' :
            return this.__DeviceHandle
        
        elif attrName == 'Message' :
            return this.DebugMessage
        
        elif attrName == 'PTRN_SET' :
            return this.PatternSetCommand
        
        elif attrName == 'WREG0_39' :
            return this.MipiWriteReg39
        
        elif attrName == 'WREG0_15' :
            return this.MipiWriteReg15
        
        elif attrName == 'WREG0_05' :
            return this.MipiWriteReg05

        elif attrName == 'WREG0_07' :
            return this.MipiWriteReg07
        
        elif attrName == 'DelayMS' :
            return this.SysDelay

        else :
            raise AttributeError(attrName)

    def TestVlin1Adc(this) :
        this.Vlin1AdcSetSamples(1111)
        this.Vlin1AdcSetInterval(22222)
        this.Vlin1AdcSetChannelOn(33333)
        this.Vlin1AdcSetChannelOff(44444)
        this.Vlin1AdcSetMode(55555)
        print("Volt(0) : %d "%this.Vlin1AdcGetVoltage(0))
        print("Volt-VLIN1 : %d "%this.Vlin1AdcGetVoltageVLIN1())
        print("Volt-VBAT : %d "%this.Vlin1AdcGetVoltageVBAT())
        print("Volt-ELVDD : %d "%this.Vlin1AdcGetVoltageELVDD())
        print("Curr(0) : %d "%this.Vlin1AdcGetCurrent(0))
        print("Curr-VLIN1 : %d "%this.Vlin1AdcGetCurrentVLIN1())
        print("Curr-VBAT : %d "%this.Vlin1AdcGetCurrentVBAT())
        print("Curr-ELVDD : %d "%this.Vlin1AdcGetCurrentELVDD())

    def TestVciAdc(this) :
        this.VciAdcSetSamples(111)
        this.VciAdcSetInterval(222)
        this.VciAdcSetChannelOn(333)
        this.VciAdcSetChannelOff(444)
        this.VciAdcSetMode(555)
        print("Volt(0) : %d "%this.VciAdcGetVoltage(0))
        print("Volt-VCI : %d "%this.VciAdcGetVoltageVCI())
        print("Volt-VDDR : %d "%this.VciAdcGetVoltageVDDR())
        print("Volt-VDDI : %d "%this.VciAdcGetVoltageVDDI())
        print("Curr(0) : %d "%this.VciAdcGetCurrent(0))
        print("Curr-VCI : %d "%this.VciAdcGetCurrentVCI())
        print("Curr-VDDR : %d "%this.VciAdcGetCurrentVDDR())
        print("Curr-VDDI : %d "%this.VciAdcGetCurrentVDDI())

    def TestSoutAdc(this) :
        this.SoutAdcSetDevConfig(77777)
        for chIdx in range(this.__SoutAdcMaxChCount) :
            this.SoutAdcSetInConfig(chIdx, 6600+chIdx)
        this.SoutAdcSetRBSel(1)
        for chIdx in range(this.__SoutAdcMaxChCount) :
            print("SoutAdc-Volt(%d) : %d "%(chIdx, this.SoutAdcGetVoltage(chIdx)))
        voltList=this.SoutAdcGetAllVoltage()
        for chIdx in range(this.__SoutAdcMaxChCount) :
            print("SoutAdc-VoltAll(%d) : %d "%(chIdx, voltList[chIdx]))
    
    def TestLdoAdc(this) :
        for chIdx in range(this.__LdoAdcMaxChCount) :
            this.LdoAdcSetInConfig(chIdx, 4500+chIdx)
        for chIdx in range(this.__LdoAdcMaxChCount) :
            print("LdoAdc-Volt(%d) : %d "%(chIdx, this.LdoAdcGetVoltage(chIdx)))
        voltList=this.LdoAdcGetAllVoltage()
        for chIdx in range(this.__LdoAdcMaxChCount) :
            print("LdoAdc-VoltAll(%d) : %d "%(chIdx, voltList[chIdx]))
    
    def TestRegAdc(this) :
        for chIdx in range(this.__RegAdcMaxChCount) :
            this.RegAdcSetInConfig(chIdx, 3400+chIdx)
        for chIdx in range(this.__RegAdcMaxChCount) :
            print("RegAdc-Volt(%d) : %d "%(chIdx, this.RegAdcGetVoltage(chIdx)))
        voltList=this.RegAdcGetAllVoltage()
        for chIdx in range(this.__RegAdcMaxChCount) :
            print("RegAdc-VoltAll(%d) : %d "%(chIdx, voltList[chIdx]))
    
            
    def SetServerIPAddr(this, serverIPAddr) :
        return True

    def Connect(this) :
        return True

    def Disonnect(this) :
        return True
    
    def SendTxtCmd(this, cmd) :
        #print("[TDevice.SendTxtCmd] " + cmd)
        ret = TDeviceSendTxtCmd(this.__DeviceHandle, TString.ConvertToCTypeStrng(cmd), c_char_p(0), 0, 10)
        if ret==1 :
            bflag = True
        else :
            bflag = False;
        return bflag

    def SendTxtCmdReadResp(this, cmd, maxRespByteSize) :
        respBytesArray=bytes(maxRespByteSize)
        ret = TDeviceSendTxtCmd(this.__DeviceHandle, TString.ConvertToCTypeStrng(cmd), respBytesArray, maxRespByteSize, 1000)
        if ret==1 :
            bflag = True
            resp = TString.ConvertCTypeStringToUnicode(respBytesArray)
        else :
            bflag = False;
            resp = TDevice.ErrorString.GetResp
        return resp


    #private methond
    def __SendCtrlCmd(this, cmd) :  
        ret = TDeviceSendCtrlCmd(this.__DeviceHandle, TString.ConvertToCTypeStrng(cmd), c_char_p(0), 0, 0)
        if ret==1 :
            bflag = True
        else :
            bflag = False;
        return bflag

    def Reset(this) :
        return this.__SendCtrlCmd('RESET')

    def Next(this) :
        return this.__SendCtrlCmd('NEXT')

    def Back(this) :
        return this.__SendCtrlCmd('BACK')

    def ReadReg(this, regAddr, byteOffset, readCount, regValueList, regValueListStartIdx=0) :
        regValueListTemp = ted.rreg(regAddr, byteOffset, readCount)
        for idx, regValueInt in enumerate(regValueListTemp) :
            regValueList[idx + regValueListStartIdx] = regValueInt
        return True

    def ReadReg1Byte(this, regAddr, byteOffset) :
        return ted.rreg1b(regAddr, byteOffset)

    def WriteReg(this, regAddr, byteOffset, writeCount, regValueList, writeDataStartIdx=0) :

        regValueListTmp=[0 for _ in range(writeCount)]  #���� Register �� ������ŭ ����Ʈ �Ҵ� 
        for i in range(writeCount) :
            regValueListTmp[i] = regValueList[i+wrietDataStartIdx]
         
        ted.wreg(regAddr, byteOffset, regValueListTmp)

        return True

    def WriteReg1Byte(this, regAddr, byteOffset, regValue) :
        ted.wreg1b(regAddr, byteOffset, regValue)
        return True

    def WriteCtrlReg(this, regAddr) :
        return this.WriteReg1Byte(regAddr, 0, 1)

    #WREG0=0x39, [Addr], [regVal0], [regVal1].....
    def MipiWriteReg39(this, regAddr, regValueList) :
        return ted.mipi_wreg_39(regAddr, regValueList)

    #WREG0=0x15, [Addr], [regVal]
    def MipiWriteReg15(this, regAddr, regValue) :
        return ted.mipi_wreg_15(regAddr, regValue)

    #WREG0=0x05, [Addr]
    def MipiWriteReg05(this, regAddr) :
        return ted.mipi_wreg_05(regAddr)

    #WREG0=0x07, [value]   :   Compressd Mode Command
    def MipiWriteReg07(this, value) :
        return ted.mipi_wreg_07(value)

    def CatchPower(this, powerInfo) :

        ret = TDeviceCatchPowerInfo(this.__DeviceHandle,  this.__PowerStructData, 1000)

        result= struct.unpack(this.__PowerStructFmt, this.__PowerStructData)

        resIdx=0
        
        powerInfo.No = result[resIdx] 
        resIdx += 1

        for i in range(10) :
            powerInfo.Avail[i] = result[i+resIdx]
        resIdx += 10

        for i in range(10) :
            powerInfo.Value1[i] = result[i+resIdx]
        resIdx += 10

        for i in range(10) :
            powerInfo.Voltage[i] = result[i+resIdx]
        resIdx += 10

        for i in range(10) :
            powerInfo.Current[i] = result[i+resIdx]
        resIdx += 10

        for i in range(10) :
            powerInfo.Range1[i] = result[i+resIdx]
        resIdx += 10

        for i in range(10) :
            powerInfo.Range2[i] = result[i+resIdx]
        resIdx += 10

        if ret==1 :
            bflag = True
        else :
            bflag = False;
        return bflag
    

    def PatternSetCommand(this, ptrnCmd) :
        return ted.pattern_set_command(ptrnCmd)

    def SysDelay(this, delay) :
        return ted.sys_delay_ms(delay)

    def DebugMessage(this, msg) :
        #print(msg)
        ret = TDeviceDebugMessage(this.__DeviceHandle, TString.ConvertToCTypeStrng(msg))
        if ret==1 :
            bflag = True
        else :
            bflag = False;
        return bflag

    def DebugFuncEnter(this, funcName) :
        ret = TDeviceDebugFuncEnter(this.__DeviceHandle, TString.ConvertToCTypeStrng(funcName))
        if ret==1 :
            bflag = True
        else :
            bflag = False;
        return bflag

    def DebugFuncLeave(this, funcName) :
        ret = TDeviceDebugFuncLeave(this.__DeviceHandle, TString.ConvertToCTypeStrng(funcName))
        if ret==1 :
            bflag = True
        else :
            bflag = False;
        return bflag

    def DD_set_fb0_blank(this, value) :
        return ted.dd_set_fb0_blank(value)

    def DD_set_dsim_manual_ctrl(this, value) :
        return ted.dd_set_dsim_manual_ctrl(value)

    #//VLIN1_ADC
    #TDEVICE_API TED_BOOL TDeviceVlin1AdcSetSamples(TDEVICE_HDL hdl, int value);  
    def Vlin1AdcSetSamples(this, value) :
        return ted.vlin1_adc_set_samples(value)

    #DEVICE_API TED_BOOL TDeviceVlin1AdcSetInterval(TDEVICE_HDL hdl, int value); 
    def Vlin1AdcSetInterval(this, value) :
        return ted.vlin1_adc_set_interval(value)

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcSetChannelOn(TDEVICE_HDL hdl, int chIdx);
    def Vlin1AdcSetChannelOn(this, value) :
        return ted.vlin1_adc_set_channel_on(value)

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcSetChannelOff(TDEVICE_HDL hdl, int chIdx); 
    def Vlin1AdcSetChannelOff(this, value) :
        return ted.vlin1_adc_set_channel_off(value)

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcSetMode(TDEVICE_HDL hdl, int value);  
    def Vlin1AdcSetMode(this, value) :
        return ted.vlin1_adc_set_mode(value)

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetVoltage(TDEVICE_HDL hdl, int chIdx);  
    def Vlin1AdcGetVoltage(this, chIdx) :
        return ted.vlin1_adc_get_voltage(chIdx)

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetVoltageVLIN1(TDEVICE_HDL hdl);  
    def Vlin1AdcGetVoltageVLIN1(this) :
        return ted.vlin1_adc_get_voltage_VLIN1()

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetVoltageVBAT(TDEVICE_HDL hdl);  
    def Vlin1AdcGetVoltageVBAT(this) :
        return ted.vlin1_adc_get_voltage_VBAT()

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetVoltageELVDD(TDEVICE_HDL hdl);  
    def Vlin1AdcGetVoltageELVDD(this) :
        return ted.vlin1_adc_get_voltage_ELVDD()

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetCurrent(TDEVICE_HDL hdl, int chIdx);  
    def Vlin1AdcGetCurrent(this, chIdx) :
        return ted.vlin1_adc_get_current(chIdx)

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetCurrentVLIN1(TDEVICE_HDL hdl); 
    def Vlin1AdcGetCurrentVLIN1(this) :
        return ted.vlin1_adc_get_current_VLIN1()

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetCurrentVBAT(TDEVICE_HDL hdl); 
    def Vlin1AdcGetCurrentVBAT(this) :
        return ted.vlin1_adc_get_current_VBAT()

    #TDEVICE_API TED_BOOL TDeviceVlin1AdcGetCurrentELVDD(TDEVICE_HDL hdl); 
    def Vlin1AdcGetCurrentELVDD(this) :
        return ted.vlin1_adc_get_current_ELVDD()

    #//VCI_ADC
    #TDEVICE_API TED_BOOL TDeviceVciAdcSetSamples(TDEVICE_HDL hdl, int value); 
    def VciAdcSetSamples(this, value) :
        return ted.vci_adc_set_samples(value)

    #TDEVICE_API TED_BOOL TDeviceVciAdcSetInterval(TDEVICE_HDL hdl, int value);
    def VciAdcSetInterval(this, value) :
        return ted.vci_adc_set_interval(value)

    #TDEVICE_API TED_BOOL TDeviceVciAdcSetChannelOn(TDEVICE_HDL hdl, int chIdx);
    def VciAdcSetChannelOn(this, value) :
        return ted.vci_adc_set_channel_on(value)

    #TDEVICE_API TED_BOOL TDeviceVciAdcSetChannelOff(TDEVICE_HDL hdl, int chIdx);
    def VciAdcSetChannelOff(this, value) :
        return ted.vci_adc_set_channel_off(value)

    #TDEVICE_API TED_BOOL TDeviceVciAdcSetMode(TDEVICE_HDL hdl, int value);
    def VciAdcSetMode(this, value) :
        return ted.vci_adc_set_mode(value)

    #TDEVICE_API int TDeviceVciAdcGetVoltage(TDEVICE_HDL hdl, int chIdx);
    def VciAdcGetVoltage(this, chIdx) :
        return ted.vci_adc_get_voltage(chIdx)

    #TDEVICE_API int TDeviceVciAdcGetVoltageVCI(TDEVICE_HDL hdl);
    def VciAdcGetVoltageVCI(this) :
        return ted.vci_adc_get_voltage_VCI()

    #TDEVICE_API int TDeviceVciAdcGetVoltageVDDR(TDEVICE_HDL hdl);
    def VciAdcGetVoltageVDDR(this) :
        return ted.vci_adc_get_voltage_VDDR()

    #TDEVICE_API int TDeviceVciAdcGetVoltageVDDI(TDEVICE_HDL hdl);
    def VciAdcGetVoltageVDDI(this) :
        return ted.vci_adc_get_voltage_VDDI()

    #TDEVICE_API int TDeviceVciAdcGetCurrent(TDEVICE_HDL hdl, int chIdx);
    def VciAdcGetCurrent(this, chIdx) :
        return ted.vci_adc_get_current(chIdx)

    #DEVICE_API int TDeviceVciAdcGetCurrentVCI(TDEVICE_HDL hdl);
    def VciAdcGetCurrentVCI(this) :
        return ted.vci_adc_get_current_VCI()

    #TDEVICE_API int TDeviceVciAdcGetCurrentVDDR(TDEVICE_HDL hdl);
    def VciAdcGetCurrentVDDR(this) :
        return ted.vci_adc_get_current_VDDR()

    #TDEVICE_API int TDeviceVciAdcGetCurrentVDDI(TDEVICE_HDL hdl);
    def VciAdcGetCurrentVDDI(this) :
        return ted.vci_adc_get_current_VDDI()

    #//SDOUT ADC
    #define TED_SDOUTADC_MAX_CH_COUNT 16
    #TDEVICE_API int TDeviceSoutAdcSetDevConfig(TDEVICE_HDL hdl, int value);
    def SoutAdcSetDevConfig(this, value) :
        return ted.sout_adc_set_devconfig(value)

    #TDEVICE_API int TDeviceSoutAdcSetInConfig(TDEVICE_HDL hdl, int chIdx,  int value); 
    def SoutAdcSetInConfig(this, chIdx, value) :
        return ted.sout_adc_set_inconfig(chIdx, value)

    #DEVICE_API int TDeviceSoutAdcSetRBSel(TDEVICE_HDL hdl, int value);    
    def SoutAdcSetRBSel(this, value) :
        return ted.sout_adc_set_rbsel(value)

    def SoutAdcGetChannelCount(this) :
        return ted.sout_adc_get_channel_count()

    #TDEVICE_API int TDeviceSoutAdcGetVoltage(TDEVICE_HDL hdl, int chIdx);  
    def SoutAdcGetVoltage(this, chIdx) :
        return ted.sout_adc_get_voltage(chIdx)

    #TDEVICE_API TED_BOOL TDeviceSoutAdcGetAllVoltage(TDEVICE_HDL hdl, int* voltageArray);
    def SoutAdcGetAllVoltage(this) :
        return ted.sout_adc_get_all_voltage()

    #TDEVICE_API TED_BOOL TDeviceLdoAdcSetInConfig(TDEVICE_HDL hdl, int chIdx, int value);
    def LdoAdcSetInConfig(this, chIdx, value) :
        return  ted.ldo_adc_set_inconfig(chIdx, value)

    def LdoAdcGetChannelCount(this) :
        return ted.ldo_adc_get_channel_count()

    #TDEVICE_API int TDeviceLdoAdcGetVoltage(TDEVICE_HDL hdl, int chIdx);
    def LdoAdcGetVoltage(this, chIdx) :
        return  ted.ldo_adc_get_voltage(chIdx)

    #TDEVICE_API TED_BOOL TDeviceLdoAdcGetAllVoltage(TDEVICE_HDL hdl, int* voltageArray);
    def LdoAdcGetAllVoltage(this) :
        return ted.ldo_adc_get_all_voltage()

    #TDEVICE_API TED_BOOL TDeviceRegAdcSetInConfig(TDEVICE_HDL hdl, int chIdx, int value);
    def RegAdcSetInConfig(this, chIdx, value) :
        return ted.reg_adc_set_inconfig(chIdx, value)

    def RegAdcGetChannelCount(this) :
        return ted.reg_adc_get_channel_count()

    #TDEVICE_API int TDeviceRegAdcGetVoltage(TDEVICE_HDL hdl, int chIdx);
    def RegAdcGetVoltage(this, chIdx) :
        return ted.reg_adc_get_voltage(chIdx)

    #TDEVICE_API TED_BOOL TDeviceLdoAdcGetAllVoltage(TDEVICE_HDL hdl, int* voltageArray);
    def RegAdcGetAllVoltage(this) :
        return ted.reg_adc_get_all_voltage()

    #TDEVICE_API TED_BOOL TDeviceAgingSetCurJobInfo(TDEVICE_HDL hdl, int jobID, int scIdx, int scCount);
    def AgingSetCurJobInfo(this, jobID, scIdx, scCount) :
        return ted.aging_set_cur_job_info(jobID, scIdx, scCount)

    #TDEVICE_API TED_BOOL TDeviceAgingSetCurSCInfo(TDEVICE_HDL hdl, int scID, int tcIdx, int tcCount);
    def AgingSetCurSCInfo(this, scID, tcIdx, tcCount) :
        return ted.aging_set_cur_sc_info(scID, tcIdx, tcCount)

    #TDEVICE_API TED_BOOL TDeviceAgingSetCurTCInfo(TDEVICE_HDL hdl, int tcID, int tcStepIdx, int tcStepCount);
    def AgingSetCurTCInfo(this, tcID, tcStepIdx, tcStepCount) :
        return ted.aging_set_cur_tc_info(tcID, tcStepIdx, tcStepCount)

    #TDEVICE_API TED_BOOL TDeviceAgingSetCurTCStepInfo(TDEVICE_HDL hdl, int tcStepID);
    def AgingSetCurTCStepInfo(this, tcStepID) :
        return ted.aging_set_cur_tcstep_info(tcStepID)

    #TDEVICE_API  TED_BOOL TDeviceAgingMeasureADC(TDEVICE_HDL hdl, int jobID, int scID, int tcID, int tcStep,  const char* desc, /*OUT*/unsigned char* res);
    def AgingMeasureADC(this) :
        soutChannelCount = this.SoutAdcGetChannelCount()
        ldoChannelCount = this.LdoAdcGetChannelCount()
        regChannelCount = this.RegAdcGetChannelCount()
        meaRes = Adc.Measure(soutChannelCount, ldoChannelCount, regChannelCount)
        list=ted.aging_measure_adc()
        meaRes.ParseListData(list)
        return meaRes
    


#
# class TFileTransfer
#
class TFileTransfer :

    class Type(enum.IntEnum) : 
        T5 = 0
        
    class ErrorType(enum.IntEnum) : 
        Success = 0,
        SendPacket=1,
        NoResp=2,
        FileOpen=3,
        StorageSize=4,
        CRC=5
    
    #TDEVICE_API TFILETRANSFER_HDL TFileTransferCreate(enum TFileTransferType type, TDEVICE_HDL deviceHandle);
    def __init__(this, type, device) :
        this.__TFileTransferHandle = TFileTransferCreate(type, device.Handle)
        this.__FileName = ""

    def __getattr__(this, attrName) :
        if attrName == 'LastErrorString' : 
            return this.GetLastErrorString()
        if attrName == 'FileName' : 
            return this.__FileName
        else :
            raise AttributeError(attrName)


    #TDEVICE_API TED_BOOL TFileTransferDestroy(TFILETRANSFER_HDL fileTransferHandle);

    #TDEVICE_API TED_BOOL TFileTransferStart(TFILETRANSFER_HDL fileTransferHandle, const char* fileName);
    def Start(this, fileName) : 
        this.__FileName = fileName
        bytesString = fileName.encode('euc-kr')
        #bytesString = fileName.encode('ascii')
        #bytesString = fileName.encode('utf-8')
        ret = TFileTransferStart(this.__TFileTransferHandle, bytesString)
        return ret

    #TDEVICE_API TED_BOOL TFileTransferStop(TFILETRANSFER_HDL fileTransferHandle);
    def Stop(this) : 
        ret = TFileTransferStop(this.__TFileTransferHandle)
        return ret

    #TDEVICE_API int TFileTransferGetFileByteSize(TFILETRANSFER_HDL fileTransferHandle);
    def GetFileByteSize(this) : 
        ret = TFileTransferGetFileByteSize(this.__TFileTransferHandle)
        return ret

    #TDEVICE_API int TFileTransferGetTransferByteSize(TFILETRANSFER_HDL fileTransferHandle);
    def GetTransferByteSize(this) : 
        ret = TFileTransferGetTransferByteSize(this.__TFileTransferHandle)
        return ret

    #TDEVICE_API TED_BOOL TFileTransferIsStart(TFILETRANSFER_HDL fileTransferHandle);
    def IsStart(this) : 
        ret = TFileTransferIsStart(this.__TFileTransferHandle)
        return ret

    #TDEVICE_API TED_BOOL TFileTransferIsDone(TFILETRANSFER_HDL fileTransferHandle);
    def IsDone(this) : 
        ret = TFileTransferIsDone(this.__TFileTransferHandle)
        return ret

    #TDEVICE_API TED_BOOL TFileTransferIsError(TFILETRANSFER_HDL fileTransferHandle);
    def IsError(this) : 
        ret = TFileTransferIsError(this.__TFileTransferHandle)
        return ret

    #TDEVICE_API enum TFileTransferError TFileTransferGetLastError(TFILETRANSFER_HDL fileTransferHandle);
    def GetLastError(this) : 
        ret = TFileTransferGetLastError(this.__TFileTransferHandle)
        return ret

    def GetLastErrorString(this) :
        err = this.GetLastError()
        if err == TFileTransfer.ErrorType.Success :
            return "Success"
        elif err == TFileTransfer.ErrorType.SendPacket :
            return "SendPacket Error"
        elif err == TFileTransfer.ErrorType.NoResp :
            return "NoResp Error"
        elif err == TFileTransfer.ErrorType.FileOpen :
            return "FileOpen Error"
        elif err == TFileTransfer.ErrorType.StorageSize :
            return "StorageSize Error"
        elif err == TFileTransfer.ErrorType.CRC :
            return "CRC Error"
        else :
            return "Unknown Error"
    
    