
import ted
import sys
import getopt

def print_help() :
    print(" ")
    print("ted.regadc --<option-name>=<options-value> <chIdx0> <chIdx1>... ")
    print(" ")
    print("   <options-name>")
    print("       --dut:  dut index (default : 0)")
    print("       --inconfig:  set interval")
    print("       --incfgch :  ch number of inconfig")
    print(" ")
    print("       -v  :  display voltage")
    print(" ")
    print("   <chIdx N>")
    print("       N is one of  0,1,2....14,15.  (min : 0  max:15)   ")
    print(" ")
    print("   Example:")
    print("       Ex1) ted.regadc -v")
    print("       Ex1) ted.regadc -v 0 1 10")
    print("       Ex3) ted.regadc --dut=1 -v 0 1 10")
    print("       Ex3) ted.regadc --inconfig=0x740 --inch=3")
    print(" ")
    

def string_to_int(strValue, valueName) : 
    try :
        value=int(strValue, 0)
    except ValueError as err:
        print("ValueError : %s is not Number [%s]" % (valueName,strValue))
        sys.exit()
    return value


def main(argv) :
    
    try :
        # opts : getopt 옵션에 따라 파싱 ex) [('-i', 'myin')]
        # etc_args: getopt 옵션 이외에 입력된 일반 Argument
        # argv 첫번째 (index:0) 는 Python파일명, 두번째 (index:1) 부터  Arguments
        opts, etc_args = getopt.getopt(argv[1:], "hd:i:c:v", ["help", "dut=","inconfig=", "incfgch=", "voltage" ])

    except getopt.GetoptError:  #옵션지정이 올바르지 않은 경우
        print("ERROR :  the name of option is invalid")
        sys.exit()

    dutIdx = 0
    dutCount = ted.sys_get_dut_count()

    channelMaxCount = 16 
    powerVoltage=[ -1  for _ in range(channelMaxCount)]
    channelValidList=[ False for _ in range(channelMaxCount)]
    displayVoltage = False
    
    devConfigValid=False
    devConfigValue=-1
    
    inConfigValid=False
    inConfigValue=-1
    
    inChValid=False
    inChValue=-1
    
    rbSelValid=False
    rbSelValue=0
    
    if len(opts)==0 :
        print_help()
        sys.exit()
    
    for opt, arg in opts :

        if opt in ("-h", "--help") :
            print_help()
            sys.exit();

        elif opt in ("-d", "--dut") :
            dutIdx = string_to_int(arg, "--dut")
            if (dutIdx < 0) or (dutIdx >= dutCount)  :
                print("ERROR: The values of dutIdx is out of range. (min:0  max:%d),  dutCount=%d" % (dutCount-1, dutCount) )
                sys.exit()
                
        elif opt in ("-i", "--inconfig") :
            inConfigValue = string_to_int(arg, "--inconfig")
            inConfigValid = True
   
        elif opt in ("-c", "--incfgch") :
            inChValue = string_to_int(arg, "--incfgch")
            inChValid = True
            if (inChValue < 0) or (inChValue > (channelMaxCount-1))  :
                print("ERROR: The values of inch is out of range. (min:0  max:%d)"%(channelMaxCount-1))
                sys.exit()

        elif opt in ("-v", "--voltage") :
            displayVoltage = True

    
    
    if inConfigValid :  

        if inChValid==False :
            print("ERROR: incfgch option is not set ,  you must set '--incfgch' to config '--inconfig'")
            print_help()
            sys.exit()

        bRet = ted.reg_adc_set_inconfig(dutIdx, inChValue, inConfigValue)
        if bRet : resMsg="OK"
        else : resMsg = "Fail"
        print("inconfig(ch=%d) : 0x%X ---- %s "%(inChValue, inConfigValue, resMsg))

    
    
    if( len(etc_args) == 0) : 
        if displayVoltage :
            try :
                powerVoltage = ted.reg_adc_get_all_voltage(dutIdx)
                if powerVoltage == None :
                    print("Fait to read data on all channel of REG-ADC")
                    sys.exit()

            except SystemError : 
                   print("Fait to read data on all channel of REG-ADC")
                   sys.exit()

            for chIdx in range(len(powerVoltage)) :
                channelValidList[chIdx]=True

    else  :
        for arg in etc_args :
            chIdx=string_to_int(arg, "chNum")
            channelValidList[chIdx] = True
    
        if displayVoltage :
            for chIdx in range(channelMaxCount) :
                if channelValidList[chIdx] :
                    powerVoltage[chIdx] = ted.reg_adc_get_voltage(dutIdx, chIdx)
    
    if displayVoltage :
        channelCount = ted.reg_adc_get_channel_count(dutIdx)
        print("RegADC, dutIdx=%d dutCnt=%d Ch.Cnt=%d " % (dutIdx, dutCount, channelCount) )    
        if channelCount > 0 : 
            for chIdx in range(channelMaxCount) :
                if channelValidList[chIdx] :
                    msg = "Ch%d"%chIdx
                    msg += ": "
                    msg += str(powerVoltage[chIdx])
                    msg += "  "
                    print(msg)    

if __name__ == "__main__" :
    main(sys.argv)

