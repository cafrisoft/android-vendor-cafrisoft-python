
import ted
import sys
import getopt

def print_help() :
    print(" ")
    print("ted.adc --<option-name>=<options-value> <addr> <PowerName> ")
    print(" ")
    print("   <options-name>")
    print("       --dut:  dut index (default : 0)")
    print("       --groupt:  set adb group name(default : EXT)")
    print("       --samples :  Average Sample Number")
    print("       --interval:  set interval")
    print("       --channel_on")
    print("       --channel_off")
    print("       --mode")
    print(" ")
    print("       -v  :  display voltage")
    print("       -a  :  display current")
    print(" ")
    print(" ")
    print("   Example:")
    print("       Ex1) ted.adc -v ")
    print("       Ex2) ted.adc -a ")
    print("       Ex3) ted.adc --dut=1 -v ")
    print("       Ex4) ted.adc --dut=1 --group=REG -v ")
    print(" ")
    

def string_to_int(strValue, valueName) : 
    try :
        value=int(strValue, 0)
    except ValueError as err:
        print("ValueError : %s is not Number [%s]" % (valueName,strValue))
        sys.exit()
    return value


def main(argv) :
    
    try :
        # opts : getopt 옵션에 따라 파싱 ex) [('-i', 'myin')]
        # etc_args: getopt 옵션 이외에 입력된 일반 Argument
        # argv 첫번째 (index:0) 는 Python파일명, 두번째 (index:1) 부터  Arguments
        opts, etc_args = getopt.getopt(argv[1:], "hd:g:va", ["help", "dut=", "group=", "voltage", "current" ])

    except getopt.GetoptError:  #�ɼ������� �ùٸ��� ���� ���
        print("ERROR :  the name of option is invalid")
        sys.exit()

    dutIdx = 0
    dutCount = ted.SysGetDutCount()

    groupIdx = 0
    groupCount = ted.AdcGetGroupCount(dutIdx)
    #print("[DBG] groupCount=%d" % groupCount)
        
    displayVoltage = False
    displayCurrent = False

    if len(opts)==0 :
        print_help()
        sys.exit()
    
    for opt, arg in opts :

        if opt in ("-h", "--help") :
            print_help()
            sys.exit();
   
        elif opt in ("-d", "--dut") :
            dutIdx = string_to_int(arg, "--dut")
            if (dutIdx < 0) or (dutIdx >= dutCount)  :
                print("ERROR: The values of dutIdx is out of range. (min:0  max:%d),  dutCount=%d" % (dutCount-1, dutCount) )
                sys.exit()
            else :
                groupCount = ted.AdcGetGroupCount(dutIdx)

        elif opt in ("-g", "--group") :
            groupIdx = ted.AdcGetGroupIndexByName(dutIdx, arg)
            if (groupIdx < 0) or (groupIdx >= groupCount)  :
                print("ERROR: The values of groupName(%s) is invalud. " % (arg) )
                sys.exit()
        

        elif opt in ("-v", "--voltage") :
            displayVoltage = True

        elif opt in ("-a", "--current") :
            displayCurrent = True
    
    print()

    groupNameList=["" for _ in range(groupCount)]
    for i in range(groupCount) :
        groupNameList[i] = ted.AdcGetGroupName(dutIdx, i)
    
    channelCount = ted.AdcGetChannelCount(dutIdx, groupIdx)
    channelNameList=["" for _ in range(channelCount)]
    for i in range(channelCount) :
        channelNameList[i] = ted.AdcGetChannelName(dutIdx, groupIdx, i)
    voltageList=[ ted.AdcGetInvalidValue() for _ in range(channelCount)]    
    currentList=[ ted.AdcGetInvalidValue() for _ in range(channelCount)]    

    print("DutIndex=%d" % dutIdx)
    print("PowerGroupIndex=%d" % groupIdx)
    print("Selected PowerGroup=", ted.AdcGetGroupName(dutIdx, groupIdx), "   **PowerGroupList=", groupNameList)
    print("ChnnelCount=%d" % channelCount,  "  ChannelNameList=", channelNameList)

    
    if displayVoltage :
        voltageList = ted.AdcGetAllVoltage(dutIdx, groupIdx)
        #for chIdx in range(channelCount) :
        #  voltageList[chIdx] = ted.adc_get_voltage(dutIdx, groupIdx, chIdx)
    
    if displayCurrent :
        currentList = ted.AdcGetAllCurrent(dutIdx, groupIdx)
        #for chIdx in range(channelCount) :
        #  currentList[chIdx] = ted.adc_get_current(dutIdx, groupIdx, chIdx)
    
    if displayVoltage | displayCurrent :
        print()
        print("-------------------------------------------------");
        print("dutIdx=%d Group=%s" % (dutIdx,  groupNameList[groupIdx]) )    
        print("-------------------------------------------------");
        for chIdx in range(channelCount) :
            msg = channelNameList[chIdx]
            msg += ": "
            if displayVoltage :
                msg +="v="
                msg += str(voltageList[chIdx])
                msg += "  "
            if displayCurrent :
                msg +="a="
                msg += str(currentList[chIdx])
                msg += "  "
            print(msg)    
        print()

if __name__ == "__main__" :
    main(sys.argv)

