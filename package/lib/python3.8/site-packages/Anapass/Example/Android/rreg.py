
import sys
import ted
import getopt

def print_help() :
    print(" ")
    print("ted.rreg --<option-name>=<options-value> <addr> <readCount> ")
    print(" ")
    print("   <options-name>")
    print("       --dut:  dut index (default : 0)")
    print("       --column :  column count when display register value")
    print("       --offset :  Level2 ByteOffset")
    print(" ")
    print("   <addr>")
    print("       register address")
    print("   <readCount>")
    print("       the count of register")
    

def string_to_int(strValue, valueName) : 
    try :
        value=int(strValue, 0)
    except ValueError as err:
        print("ValueError : %s is not Number [%s]" % (valueName,strValue))
        sys.exit()
    return value


def main(argv) :
    
    try :
        # opts : getopt 옵션에 따라 파싱 ex) [('-i', 'myin')]
        # etc_args: getopt 옵션 이외에 입력된 일반 Argument
        # argv 첫번째 (index:0) 는 Python파일명, 두번째 (index:1) 부터  Arguments
        opts, etc_args = getopt.getopt(argv[1:], "hd:c:o:", ["help", "dut=", "column=", "offset=" ])
    except getopt.GetoptError:  #옵션지정이 올바르지 않은 경우
        print("ERROR :  the name of option is invalid")
        sys.exit()

    dutIdx = 0
    dutCount = ted.SysGetDutCount()

    columnValue = 8
    byteOffset = 0

    for opt, arg in opts :

        if opt in ("-h", "--help") :
            print_help()
            sys.exit();

        elif opt in ("-d", "--dut") :
            dutIdx = string_to_int(arg, "--dut")
            if (dutIdx < 0) or (dutIdx >= dutCount)  :
                print("ERROR: The values of dutIdx is out of range. (min:0  max:%d),  dutCount=%d" % (dutCount-1, dutCount) )
                sys.exit()
     
        elif opt in ("-c", "--column") :
            columnValue = string_to_int(arg, "column")
            if (columnValue < 1) or (columnValue > 1024)  :
                print("ERROR: The values of column is out of range. (min:1  max:1024)")
                sys.exit()
   
        elif opt in ("-o", "--offset") :
            byteOffset = string_to_int(arg, "offset")
            if (byteOffset < 0) or (byteOffset > 1024)  :
                print("ERROR: The values of byteOffset is out of range. (min:0  max:1024)")
                sys.exit()

    argc = len(etc_args)
    if argc != 2 :
        print("Argument Error :  You have to input <addr> and <readCount>")
        print_help()
        exit(0)

    try :
        addr=int(etc_args[0], 0)
    except ValueError as err:
        print("ValueError : The address of register is not number. [%s]"%etc_args[0])
        print_help()
        exit(0)
    
    try :
        readCount=int(etc_args[1], 0)
    except ValueError as err:
        print("ValueError : The 'readCount' is not number. [%s]"%etc_args[1])
        print_help()
        exit(0)
    

    print("[Addr=0x%02X  Level2ByteOffset=%d  regCount=%d]" %(addr, byteOffset, readCount))

    #print("columnValue=", columnValue)

    printCount=0
    regList = ted.DD_DSIM_MipiReadReg(dutIdx, addr, byteOffset, readCount)
    for regValue in regList :
        print("0x%02X,"%regValue, end='')
        if ((printCount+1)%columnValue)==0 :
            print("")
        printCount+=1
    print(" ");

if __name__ == "__main__" :
    main(sys.argv)