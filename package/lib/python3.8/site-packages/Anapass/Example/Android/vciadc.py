
import ted
import sys
import getopt

def print_help() :
    print(" ")
    print("ted.vciadc --<option-name>=<options-value> <addr> <PowerName> ")
    print(" ")
    print("   <options-name>")
    print("       --dut:  dut index (default : 0)")
    print("       --samples :  Average Sample Number")
    print("       --interval:  set interval")
    print("       --channel_on")
    print("       --channel_off")
    print("       --mode")
    print(" ")
    print("       -v  :  display voltage")
    print("       -a  :  display current")
    print(" ")
    print("   <PowerName>")
    print("       VLIN1 VBAT ELVDD")
    print(" ")
    print("   Example:")
    print("       Ex1) ted.vciadc -v ")
    print("       Ex2) ted.vciadc -a ")
    print("       Ex3) ted.vciadc --dut=1 -v ")
    print("       Ex3) ted.vciadc --samples=4 -v  VCI VDDR")
    print("       Ex3) ted.vciadc --samples=4 -v -a VDDR")
    print(" ")
    

def string_to_int(strValue, valueName) : 
    try :
        value=int(strValue, 0)
    except ValueError as err:
        print("ValueError : %s is not Number [%s]" % (valueName,strValue))
        sys.exit()
    return value


def main(argv) :
    
    try :
        # opts : getopt 옵션에 따라 파싱 ex) [('-i', 'myin')]
        # etc_args: getopt 옵션 이외에 입력된 일반 Argument
        # argv 첫번째 (index:0) 는 Python파일명, 두번째 (index:1) 부터  Arguments
        opts, etc_args = getopt.getopt(argv[1:], "hd:s:i:C:c:m:va", ["help", "dut=", "samples=", "interval=", "channel_on=", "channel_off=", "mode=", "voltage", "current" ])

    except getopt.GetoptError:  #옵션지정이 올바르지 않은 경우
        print("ERROR :  the name of option is invalid")
        sys.exit()

    dutIdx = 0
    dutCount = ted.sys_get_dut_count()
    powerNameTuple=("VCI", "VDDR", "VDDI")
    powerValidList=[ False, False, False ]
    powerVoltage=[ -1, -1, -1 ]
    powerCurrent=[ -1, -1, -1 ]
    powerCount = len(powerNameTuple)

    samplesValue = -1
    intervalValue = -1
    channel_on_Value = -1
    channel_off_Value = -1
    modeValue = -1
    displayVoltage = False
    displayCurrent = False

    if len(opts)==0 :
        print_help()
        sys.exit()

    
    for opt, arg in opts :

        if opt in ("-h", "--help") :
            print_help()
            sys.exit();
   
        elif opt in ("-d", "--dut") :
            dutIdx = string_to_int(arg, "--dut")
            if (dutIdx < 0) or (dutIdx >= dutCount)  :
                print("ERROR: The values of dutIdx is out of range. (min:0  max:%d),  dutCount=%d" % (dutCount-1, dutCount) )
                sys.exit()

        elif opt in ("-s", "--samples") :
            samplesValue = string_to_int(arg, "--samples")
            if (samplesValue <2) or (samplesValue > 1024)  :
                print("ERROR: The values of samples is out of range. (min:2  max:1024)\n   **value must be the squre number of 2   ex) 2, 4, 16, ... 256, 512, 1024 ")
                sys.exit()


            #값이 2^n (범위: 2~1024) 인지 체크한다.
            is2Pow=False
            for idx in range(10) :
                v1 = 2 ** (idx+1)
                if v1 == samplesValue :
                    is2Pow=True
                    break
            
            if is2Pow!=True :
                print("ERROR: The values of samples is NOT squire number of 2. \n **value must be the squre number of 2   ex) 2, 4, 16, ... 256, 512, 1024 ")
                sys.exit()

   
        elif opt in ("-i", "--interval") :
            intervalValue = string_to_int(arg, "interval")
            if (intervalValue < 140) or (intervalValue > 8244)  :
                print("ERROR: The values of interval is out of range. (min:140  max:8244)")
                sys.exit()
   
        elif opt in ("-C", "--channel_on") :
            argUpper=arg.upper()
            try :
                channel_on_Value = powerNameTuple.index(argUpper)
            except ValueError :
                print("ERROR: The values of channel_on is invalid PowerName(%s). \n\tThe name of Power is one of %s"%(arg, str(powerNameTuple)))
                sys.exit()
   
        elif opt in ("-c", "--channel_off") :
            argUpper=arg.upper()
            try :
                channel_off_Value = powerNameTuple.index(argUpper)
            except ValueError :
                print("ERROR: The values of channel_on is invalid PowerName(%s). \n\tThe name of Power is one of %s"%(arg, str(powerNameTuple)))
                sys.exit()
   
        elif opt in ("-m", "--mode") :
            modeValue = string_to_int(arg, "mode")
            if modeValue!=0 and modeValue!=1 :
                print("ERROR: The values of mode must be one of  '0' , '1' ")
                sys.exit()
   

        elif opt in ("-v", "--voltage") :
            displayVoltage = True

        elif opt in ("-a", "--current") :
            displayCurrent = True
    
    print()
    if samplesValue >= 0 : 
        bRet = ted.vci_adc_set_samples(dutIdx, samplesValue)
        if bRet : resMsg="OK"
        else : resMsg = "Fail"
        print("samples : %d ---- %s "%(samplesValue, resMsg))

    if intervalValue >= 0 :  
        bRet = ted.vci_adc_set_interval(dutIdx, intervalValue)
        if bRet : resMsg="OK"
        else : resMsg = "Fail"
        print("interval : %d ---- %s "%(intervalValue, resMsg))

    if channel_on_Value >= 0 :  
        bRet = ted.vci_adc_set_channel_on(dutIdx, channel_on_Value)
        if bRet : resMsg="OK"
        else : resMsg = "Fail"
        print("channel_on : %d ---- %s "%(channel_on_Value, resMsg))

    if channel_off_Value >= 0 :  
        bRet = ted.vci_adc_set_channel_off(dutIdx, channel_off_Value)
        if bRet : resMsg="OK"
        else : resMsg = "Fail"
        print("channel_off : %d ---- %s "%(channel_off_Value, resMsg))

    if modeValue >= 0 :  
        bRet = ted.vci_adc_set_mode(dutIdx, modeValue)
        if bRet : resMsg="OK"
        else : resMsg = "Fail"
        print("mode : %d ---- %s "%(modeValue, resMsg))

 
    #if displayVoltage==False and displayCurrent==False and len(opts)==0 :
    #    displayVoltage=True
    #    displayCurrent=True 
    
    
    if( len(etc_args) == 0) : 
        for powerIdx in range(powerCount) :
            powerValidList[powerIdx] = True
    else  :
        for arg in etc_args :
            argUpper=arg.upper()
            for powerIdx, powerName in enumerate(powerNameTuple) :
                if powerName == argUpper :
                    powerValidList[powerIdx] = True
                    break
    
    if displayVoltage :
        for powerIdx in range(powerCount) :
            if powerValidList[powerIdx] :
                powerVoltage[powerIdx] = ted.vci_adc_get_voltage(dutIdx, powerIdx)
    
    if displayCurrent :
        for powerIdx in range(powerCount) :
            if powerValidList[powerIdx] :
                powerCurrent[powerIdx] = ted.vci_adc_get_current(dutIdx, powerIdx)
    
    if displayVoltage | displayCurrent :
        print()
        print("-------------------------------------------------");
        print("VciADC, dutIdx=%d dutCnt=%d " % (dutIdx, dutCount) )    
        print("-------------------------------------------------");
        for powerIdx in range(powerCount) :
            if powerValidList[powerIdx] :
                msg = powerNameTuple[powerIdx]
                msg += ": "
                if displayVoltage :
                    msg +="v="
                    msg += str(powerVoltage[powerIdx])
                    msg += "  "
                if displayCurrent :
                    msg +="a="
                    msg += str(powerCurrent[powerIdx])
                    msg += "  "
                print(msg)    
        print()

if __name__ == "__main__" :
    main(sys.argv)

